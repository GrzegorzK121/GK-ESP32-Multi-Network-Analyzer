#include "esp_wifi.h"
#include "esp_log.h"
#include "driver/gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "GK_OLED_TEXT.h"
#include <string.h>
#include "GK_MENU_SCREEN.h"
#include "GK_MENU_NAVIGATION.h"

#include "GK_SIM_800L.h"
#include "driver/uart.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include <stdio.h>
#include <string.h>

// UART configuration
#define SIM800L_UART_PORT   UART_NUM_1  // Use UART1
#define SIM800L_TX_PIN      1           // ESP32 TX → SIM800L RX
#define SIM800L_RX_PIN      3           // ESP32 RX ← SIM800L TX
#define SIM800L_BAUD_RATE   115200      // Communication speed

// Global status variables
bool sim800l_check_connection_status = false;
bool sim800l_call_status = false;
bool sim800l_send_sms_status = false;

/*------------------------------------------------------------------------------
  1) UART INITIALIZATION
------------------------------------------------------------------------------*/
void gk_sim800l_uart_init(void) {
    const uart_config_t uart_config = {
        .baud_rate = SIM800L_BAUD_RATE,
        .data_bits = UART_DATA_8_BITS,
        .parity = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };

    // Configure UART
    uart_param_config(SIM800L_UART_PORT, &uart_config);
    uart_set_pin(SIM800L_UART_PORT, SIM800L_TX_PIN, SIM800L_RX_PIN, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    uart_driver_install(SIM800L_UART_PORT, 1024 * 2, 0, 0, NULL, 0);
}

/*------------------------------------------------------------------------------
  2) SEND AT COMMAND
------------------------------------------------------------------------------*/
void gk_sim800l_send_command(const char *command) {
    uart_write_bytes(SIM800L_UART_PORT, command, strlen(command));
    uart_write_bytes(SIM800L_UART_PORT, "\r\n", 2);
}

/*------------------------------------------------------------------------------
  3) CHECK NETWORK CONNECTION
  - Sends AT+CREG? to verify if SIM800L is connected to the network.
------------------------------------------------------------------------------*/
void gk_sim800l_check_connection(void) {
    sim800l_check_connection_status = true;

    gk_sim800l_send_command("AT+CREG?");
    vTaskDelay(3000 / portTICK_PERIOD_MS);  // Simulate network check delay

    sim800l_check_connection_status = false;
}

/*------------------------------------------------------------------------------
  4) CALL FUNCTION
  - Calls a fixed phone number: +48887949478
------------------------------------------------------------------------------*/
void gk_sim800l_call(void) {
    sim800l_call_status = true;

    // Fixed number to dial
    const char *phone_number = "+48887949478";
    char at_command[32];
    snprintf(at_command, sizeof(at_command), "ATD%s;", phone_number);

    gk_sim800l_send_command(at_command);
    vTaskDelay(5000 / portTICK_PERIOD_MS);  // Simulate call duration

    sim800l_call_status = false;
}

/*------------------------------------------------------------------------------
  5) SEND SMS FUNCTION
  - Sends a test message to +48887949478
------------------------------------------------------------------------------*/
void gk_sim800l_send_sms(void) {
    sim800l_send_sms_status = true;

    const char *phone_number = "+48887949478";
    const char *message = "TEST MESSAGE FROM SIM800L";

    gk_sim800l_send_command("AT+CMGF=1"); // Set text mode
    vTaskDelay(500 / portTICK_PERIOD_MS);

    char at_command[32];
    snprintf(at_command, sizeof(at_command), "AT+CMGS=\"%s\"", phone_number);
    gk_sim800l_send_command(at_command);
    vTaskDelay(500 / portTICK_PERIOD_MS);

    gk_sim800l_send_command(message);
    uart_write_bytes(SIM800L_UART_PORT, "\x1A", 1); // End message character
    vTaskDelay(4000 / portTICK_PERIOD_MS); // Simulate sending delay

    sim800l_send_sms_status = false;
}
